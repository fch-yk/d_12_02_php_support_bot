import datetime
import textwrap

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler
from telegram.ext import Filters, Updater

from .models import ChatState, Client, Order, RegistrationRequest, Subcontractor, Manager
from .tg_lib import (get_client_orders, get_current_subscription, get_subcontractor_orders, show_auth_keyboard,
                     show_client_menu_keyboard, show_status_order_keyboard, show_subcontractor_menu_keyboard,
                     show_subcontractor_order_keyboard, show_client_order_keyboard)

from phpsupport.settings import ORDER_PRICE

def start(update, context):
    chat_id = update.message.chat_id
    is_client = Client.objects.filter(telegram_user_id=chat_id)
    is_subcontractor = Subcontractor.objects.filter(telegram_user_id=chat_id)

    if is_client:
        client_name = is_client.first().name
        update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {client_name}')

        if not get_current_subscription(is_client.first()):
            update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É')
            return "HANDLE_AUTH"

        show_client_menu_keyboard(update, context)
        return "CLIENT_MENU"

    if is_subcontractor:
        subcontractor = is_subcontractor.first()
        if subcontractor.is_banned:
            update.message.reply_text('–í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø!')
            return "HANDLE_AUTH"
        show_subcontractor_menu_keyboard(update, context)
        return "SUBCONTRACTOR_MENU"

    if not (is_client and is_subcontractor):
        show_auth_keyboard(update, context)
        return "HANDLE_AUTH"


def handle_auth(update, context):
    if '–ø–æ–¥—Ä—è–¥—á–∏–∫' in update.message.text:
        context.user_data['partner_role'] = RegistrationRequest.SUBCONTRACTOR
    elif '–∫–ª–∏–µ–Ω—Ç' in update.message.text:
        context.user_data['partner_role'] = RegistrationRequest.CLIENT

    if 'üîê' in update.message.text:
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏/–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
        context.user_data['name'] = 'new'
        return "HANDLE_AUTH"
    elif context.user_data['name'] == 'new':
        context.user_data['name'] = update.message.text
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ –∏/–∏–ª–∏ –æ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
        context.user_data['description'] = 'new desc'
        return "HANDLE_AUTH"
    elif context.user_data['description'] == 'new desc':
        context.user_data['description'] = update.message.text
        RegistrationRequest.objects.create(
            name=context.user_data['name'],
            description=context.user_data['description'],
            partner_role=context.user_data['partner_role'],
            telegram_user_id=update.message.chat_id
        )

        message = textwrap.dedent('''
            –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É
            –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä!''')

        update.message.reply_text(text=message)
        return 'HANDLE_AUTH'


def handle_client_menu(update, context):
    user_data = context.user_data
    if '–°–ø–∏—Å–æ–∫' in update.message.text:
        client = Client.objects.get(telegram_user_id=update.message.chat_id)
        orders = Order.objects.filter(client=client)
        get_client_orders(update, orders)
        show_client_order_keyboard(update, context)
        return 'CLIENT_ORDER_MENU'

    if '–ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞' in update.message.text:
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                  reply_markup=ReplyKeyboardRemove())
        user_data['client_menu'] = 'send_question'
        return 'CLIENT_MENU'
    elif user_data['client_menu'] == 'send_question':
        managers = Manager.objects.all()
        client = Client.objects.get(telegram_user_id=update.message.chat_id)
        for manager in managers:
            message = f'–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client.name}:'
            context.bot.send_message(chat_id=manager.telegram_user_id, text=message + update.message.text)
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        return 'CLIENT_MENU'

    if '–û—Ñ–æ—Ä–º–∏—Ç—å' in update.message.text:
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏', reply_markup=ReplyKeyboardRemove())
        user_data['order_detail'] = 'new_order_detail'

    elif user_data['order_detail'] == 'new_order_detail':
        user_data['order_detail'] = update.message.text
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)')
        user_data['due'] = 'new_due'

    elif user_data['due'] == 'new_due':
        user_data['due'] = update.message.text
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å–∞–π—Ç–∞')
        user_data['site_login'] = 'new_site_login'

    elif user_data['site_login'] == 'new_site_login':
        user_data['site_login'] = update.message.text
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å–∞–π—Ç–∞')
        user_data['site_password'] = 'new_site_password'

    elif user_data['site_password'] == 'new_site_password':
        user_data['site_password'] = update.message.text

        client = Client.objects.get(telegram_user_id=update.message.chat_id)
        order = Order.objects.create(
            client=client,
            description=user_data['order_detail'],
            due_date=datetime.date.today() + datetime.timedelta(days=int(user_data['due'])),
            client_site_login=user_data['site_login'],
            client_site_password=user_data['site_password']
        )

        message = textwrap.dedent(f'''
            –ó–∞—è–≤–∫–∞ {order.id} —Å–æ–∑–¥–∞–Ω–∞.
            –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–µ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!''')

        update.message.reply_text(text=message)
    return 'CLIENT_MENU'


def handle_client_order_menu(update, context):
    user_data = context.user_data
    if update.message.text == '–ù–∞–∑–∞–¥':
        show_client_menu_keyboard(update, context)
        return "CLIENT_MENU"

    if '–í–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é' in update.message.text:
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
                                  reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
                                  )
        user_data['client_menu'] = 'change_order'
        return 'CLIENT_ORDER_MENU'

    elif user_data['client_menu'] == 'change_order':
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                  reply_markup=ReplyKeyboardRemove())
        user_data['order_id'] = int(update.message.text)
        user_data['client_menu'] = 'send_question'
        return 'CLIENT_ORDER_MENU'

    if user_data['client_menu'] == 'send_question':
        order = Order.objects.get(id=user_data['order_id'])
        subcontractor = order.subcontractor
        context.bot.send_message(chat_id=subcontractor.telegram_user_id, text=update.message.text)
        update.message.reply_text('–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
        show_client_menu_keyboard(update, context)
        return 'CLIENT_MENU'


def handle_subcontractor_menu(update, context):
    if update.message.text == '–ù–∞–∑–∞–¥':
        show_subcontractor_menu_keyboard(update, context)
        return "SUBCONTRACTOR_MENU"

    if '–°–ø–∏—Å–æ–∫' in update.message.text:
        orders = Order.objects.filter(status=Order.UNPROCESSED)
        get_subcontractor_orders(update, orders)
        update.message.reply_text(f'–°—Ç–∞–≤–∫–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {ORDER_PRICE}')
        update.message.reply_text('–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                  reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
                                  )

        context.user_data['subcontractor_menu'] = 'new_order'
    elif '–ú–æ–∏' in update.message.text:
        subcontractor = Subcontractor.objects.get(telegram_user_id=update.message.chat_id)
        orders = Order.objects.filter(status=Order.IN_PROGRESS,
                                      subcontractor=subcontractor)
        get_subcontractor_orders(update, orders)
        show_subcontractor_order_keyboard(update, context)
        return 'SUBCONTRACTOR_ORDER_MENU'

    elif '–§–∏–Ω–∞–Ω—Å—ã' in update.message.text:
        subcontractor = Subcontractor.objects.get(telegram_user_id=update.message.chat_id)
        complete_order_counts = Order.objects.filter(status=Order.COMPLETED,
                                                     subcontractor=subcontractor).count()
        message = f'''–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {complete_order_counts}
                  –°—Ç–∞–≤–∫–∞ –∑–∞ –∑–∞–∫–∞–∑: {ORDER_PRICE}
                  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {complete_order_counts*ORDER_PRICE}'''
        update.message.reply_text(text=message,
                                  reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
                                  )
        return 'SUBCONTRACTOR_ORDER_MENU'

    elif context.user_data['subcontractor_menu'] == 'new_order':
        subcontractor = Subcontractor.objects.get(telegram_user_id=update.message.chat_id)
        order = Order.objects.get(pk=update.message.text)

        order.subcontractor = subcontractor
        order.status = Order.IN_PROGRESS
        order.save()
        update.message.reply_text('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞ –≤–∞–º–∏. –î–ª—è –µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫')

    return 'SUBCONTRACTOR_MENU'


def send_question(update, context, user_data):
    client = Order.objects.get(id=user_data['order_id']).client
    context.bot.send_message(chat_id=client.telegram_user_id, text=update.message.text)

def handle_subcontractor_order_menu(update, context):
    user_data = context.user_data

    if update.message.text == '–ù–∞–∑–∞–¥':
        show_subcontractor_menu_keyboard(update, context)
        return 'SUBCONTRACTOR_MENU'

    if '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏' in update.message.text:
        update.message.reply_text('–î–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                  reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
                                  )
        user_data['order_menu'] = 'change_order'
        user_data['order_action'] = 'change_status'
        return 'SUBCONTRACTOR_ORDER_MENU'

    elif '–í–æ–ø—Ä–æ—Å –∑–∞–∫–∞–∑—á–∏–∫—É' in update.message.text:
        update.message.reply_text('–ü–æ –∫–∞–∫–æ–º—É –∑–∞–∫–∞–∑—É –≤–æ–ø—Ä–æ—Å?',
                                  reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥']], resize_keyboard=True)
                                  )
        user_data['order_menu'] = 'change_order'
        user_data['order_action'] = 'send_question'
        return 'SUBCONTRACTOR_ORDER_MENU'

    elif user_data['order_menu'] == 'change_order':
        user_data['order_id'] = int(update.message.text)

        if user_data['order_action'] == 'send_question':
            update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                      reply_markup=ReplyKeyboardRemove())
            user_data['order_menu'] = 'send_question'
        else:
            show_status_order_keyboard(update, context)
            user_data['order_menu'] = 'change_status'
        return 'SUBCONTRACTOR_ORDER_MENU'

    elif user_data['order_menu'] == 'send_question':
        send_question(update, context, user_data)
        update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        show_subcontractor_menu_keyboard(update, context)
        return 'SUBCONTRACTOR_MENU'

    elif user_data['order_menu'] == 'change_status':
        status = update.message.text
        order_id = user_data['order_id']

        subcontractor = Subcontractor.objects.get(telegram_user_id=int(update.message.chat_id))
        order = subcontractor.orders.filter(id=order_id).first()
        if status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
            order.status = Order.COMPLETED
        elif status == '–û—Ç–∫–ª–æ–Ω–µ–Ω':
            order.status = Order.DECLINED
        order.save()

        update.message.reply_text('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
        show_subcontractor_menu_keyboard(update, context)

        message = f'–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}'
        context.bot.send_message(chat_id=order.client.telegram_user_id, text=message)

        return 'SUBCONTRACTOR_MENU'

class TgSupportBot(object):
    def __init__(self, tg_token, states_functions):
        self.tg_token = tg_token
        self.states_functions = states_functions
        self.updater = Updater(token=tg_token, use_context=True)
        self.updater.dispatcher.add_handler(CommandHandler('start', self.handle_users_reply))
        self.updater.dispatcher.add_handler(CallbackQueryHandler(self.handle_users_reply))
        self.updater.dispatcher.add_handler(MessageHandler(Filters.text | Filters.contact, self.handle_users_reply))

    def handle_users_reply(self, update, context):

        if update.message:
            user_reply = update.message.text
            chat_id = update.message.chat_id
        elif update.callback_query:
            user_reply = update.callback_query.data
            chat_id = update.callback_query.message.chat_id
        else:
            return

        chat_state, _ = ChatState.objects.get_or_create(chat_id=chat_id)

        if user_reply == '/start':
            user_state = 'START'
        else:
            user_state = chat_state.state

        state_handler = self.states_functions[user_state]
        try:
            next_state = state_handler(update, context)
            chat_state.state = next_state
            chat_state.save()
        except Exception as err:
            print(err)
