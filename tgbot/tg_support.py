import os
import textwrap

from dotenv import load_dotenv

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton

from telegram.ext import Updater, Filters
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler


def show_auth_keyboard(update, context):
    message = textwrap.dedent('''
        –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:''')

    reply_markup = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–ª–∏–µ–Ω—Ç–∞", callback_data='client_auth')],
         [InlineKeyboardButton("üîê –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='contracter_auth')],],
        resize_keyboard=True
    )
    update.message.reply_text(text=message, reply_markup=reply_markup)


def show_registration_keyboard(update, context):
    query = update.callback_query
    if query.data == 'client_auth':
        message = textwrap.dedent('''
            –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏''')
    else:
        message = textwrap.dedent('''
            –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Ä–µ–∑—é–º–µ)
            –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏''')

    reply_markup = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='send_request')]],
    )
    update.callback_query.message.reply_text(text=message, reply_markup=reply_markup)


def start(update, context):
    show_auth_keyboard(update, context)
    return "HANDLE_MENU"


def handle_auth(update, context):
    show_registration_keyboard(update, context)
    return 'HANDLE_NEW_USER'


def handle_users_reply(update, context):
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return

    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = 'HANDLE_AUTH'

    states_functions = {
        'START': start,
        'HANDLE_AUTH': handle_auth,
        'HANDLE_NEW_USER': handle_auth,
        # 'HANDLE_CART': view_cart,
        # 'WAITING_EMAIL': waiting_email,
    }

    state_handler = states_functions[user_state]
    try:
        next_state = state_handler(update, context)
        # db.set(chat_id, next_state)
    except Exception as err:
        print(err)


if __name__ == '__main__':
    load_dotenv()
    token = os.environ.get("TELEGRAM_TOKEN")
    client_id = os.environ.get("CLIENT_ID")


    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', handle_users_reply))
    dispatcher.add_handler(CallbackQueryHandler(handle_users_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_users_reply))

    updater.start_polling()


